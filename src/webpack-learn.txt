webpack 5个核心概念
  1 entry  以哪个文件为入口起点开始打包
  2 output  打包好的资源输出到哪里去，以及如何命名
  3 loader   让webpack 能够去处理哪些非JavaScript文件（webpack自身只理解javascript ）
  4 plugins  插件可以用于执行范围更广的任务，插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等
  5 mode （模式mode）指示webpack 使用相应模式的配置
     development 会将process.env.NODE_ENV 的值设为development.
                  启用NamedChunksPlugin 和 NamedModulesPlugin     
                  能让代码本地调试运行的环境
            指令： webpack ./src/main.js -o ./dist/bundle.js --mode=development
    production   会将process.env.NODE_ENV 的值设为 production
                 启用FlagDependencyUsagePlugin,
                     FlagIncludedChunksPlugin,
                ModuleConcatenationPlugin,NoEmitOnErrorsPlugin,
                OccurrenceOrderPlugin,SideEffectsFlagPlugin 和 UglifyJsPlugin
                能让代码优化上线运行的环境



webpack处理图片
图片处理url-loader(webpack5之前的处理方式)
在项目开发中，我们时长会需要使用到图片，比如在img文件夹中有图片test1.png，然后在normal.css中会引用到图片
body{
    background: url("../img/test1.png");
}
但是此时，我们直接使用webpack打包是会报错的，我们需要安装url-loader，它是用于将文件转换为 base64 URI 的 loader。

安装命令如下：
        npm install url-loader --save-dev
 url-loader 功能类似于 file-loader, 但是在文件大小（单位为字节）低于指定的限制时，可以返回一个 DataURL。

接着我们在webpack.config.js中配置url-loader的设置
module.exports = {
  module: {
    rules: [
      {
        test: /\.(png|jpg|gif|jpeg)$/i,
        use: [
          {
            loader: 'url-loader',
            options: {
              limit: 8192,
            },
          },
        ],
      },
    ],
  },
};
-----------------------------------
此时，如果我们的图片test1.png的大小小于8192k，那么就可以打包成功，但是如果我们的图片大于8192k，此时就需要安装file-loader

安装命令如下
npm install file-loader --save-dev
然后，在 webpack.config.js 配置中添加 loader。例如：
module.exports = {
  module: {
    rules: [
      {
        test: /\.(png|jpe?g|gif)$/i,
        use: [
          {
            loader: 'file-loader',
            options: {
              publicPath: "dist/"
            }
          },
        ],
      },
    ],
  },
};
-----------------------------------
注意：配置时如果你同时配置了url-loader，一定要把url-loader的配置注释掉
此时如果我们进行打包，打包出来的图片名字是随机的哈希值字符串，例如1b959a13f661bd214696460400b8c8d0.png，如果我们想自定义名字，则需要进行配置option选项，具体参数可以参考官网

资源模块
webpack5之前我们处理静态资源比如。图片字体之类的资源的时候等，需要用到url-loader，file-loader，raw-loader，webpack5则放弃了这三个loader，这三个loader在github上也停止了更新。

webpack5使用四种新增的资源模块（Asset Modules）替代了这些loader的功能。

asset/resource 将资源分割为单独的文件，并导出url，就是之前的 file-loader的功能.
asset/inline 将资源导出为dataURL（url(data:)）的形式，之前的 url-loader的功能.
asset/source 将资源导出为源码（source code）. 之前的 raw-loader 功能.
asset 自动选择导出为单独文件或者 dataURL形式（默认为8KB）. 之前有url-loader设置asset size limit 限制实现。
-----------------------------------
我们这里以assert/inline为例子，进行配置
const path = require('path')

module.exports = {
  entry: './src/main.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: [
      {
        test: /\.png/,
        type: 'asset/inline'
      },
    ],
  },
}
-----------------------------------
此时，再进行打包，png格式的图片都会被作为 data URI 注入到 bundle 中。



p131   使用pub 脚本实现最简单的发布策略
       首先创建配置文件 webpack.publish.config.js
       在package.json 文件中配置 pub 脚本   "pub":"webpack --config webpack.publish.config.js"

       在npm run pub 



p132  把所有图片放到一个文件里夹里
     在test 规则中
     加上一个属性，这里webpack5新配置和视频配置不一样
      generator:{
              filename:'imgs/[hash][ext]'
          }
          
p133  
 ----------------------------以下是视频旧版webpack,新版会报错-------------
  使用clean-webpack-plugin  清除dist 目录
     按住插件npm i clean-webpack-plugin -D
     在webpack.publish.config.js中配置这个插件
     //导入删除文件夹的插件
      const cleanPlugin=require('clean-webpack-plugin')

      在plugins 配置节点
        new cleanPlugin(['dist'])//指定每次重新发布的时候，要先删除的文件夹

  ——————————————————----------一下是新版配置--------------------------

const { CleanWebpackPlugin } = require('clean-webpack-plugin')

module.exports = {
    ...
    plugins: [
            new CleanWebpackPlugin()
    ]
}

新版的引用方式已改成 const { CleanWebpackPlugin } = require('clean-webpack-plugin');如果继续使用旧版引用方式，会报 “CleanWebpackPlugin is not a constructor ” 错误

    //传参方式也改了，这里可以不用传参，默认值全部

p134 
-----------------视频老版本，新版已经不用-------------------------
 使用webpack.optimize.CommonsChunkPlugin抽离第三方包
    entry:{
    app:path.join(__dirname,'./src/main.js'),//这是项目的主入口文件
    vendors:['jquery']//这是第三方包的名称

   },
     //导入webpack这个模块
      const webpack=require('webpack')

       new webpack.optimize.CommonsChunkPlugin({
           name:'vendors',//第三方包名称
           filename:'vendors.js'//指定抽离出来的第三方包文件名
       })
       ------------新版--------------------------------
       entry:{
    
    app:{

        import:path.join(__dirname,'./src/main.js'),//这是项目的主入口文件
        dependOn:'vendors'
    },
    
        vendors:['jquery'],//这是第三方包的名称

         output:{
        path:path.join(__dirname,'./dist'),
        filename:'js/[name].js'//抽离第三方包名称和打包后的名称
    },


p135  压缩优化JavaScript 文件
    ------------视频配置是老版本，新版webpack 已弃用---------
    -------新版配置--------------

     npm install terser-webpack-plugin --save-dev

     const TerserPlugin = require("terser-webpack-plugin");

module.exports = {
  optimization: {
    minimize: true,
    minimizer: [new TerserPlugin()],
  },
};



p136   抽离CSS样式表到单独的文件中
     -------------------webpack5新版配置改变了-------------------
     因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载
     这里需要借助到mini-css-extract-plugin，并配置两个地方(详见代码)
     webpack.publish.const.js 需要修改两个地方
     安装
       npm i mini-css-extract-plugin -D

       const MiniCssExtractPlugin=require('mini-css-extract-plugin')

      



     1.在样式的loader最后一个style-loader 改成MiniCssExtractPlugin.loader
     2. 调用MiniCssExtractPlugin,并指定输出的filename

     { test: /\.css$/, use: ['MiniCssExtractPlugin.loader', 'css-loader'] },
     { test: /\.less$/, use: ['MiniCssExtractPlugin.loader', 'css-loader','less-loader'] },
     { test: /\.scss$/, use: ['MiniCssExtractPlugin.loader', 'css-loader','sass-loader'] },

     plugins:[
       new MiniCssExtractPlugin({
         filename:'css/[name].css'
       })
     ]
     只需要将插件配置项filename的值改为路径形式，比如filename: '[name].css'改为filename: 'css/[name].css'，
     这样，就能在dist下创建css目录，将样式打包到该目录下


p137 压缩CSS文件
   安装
     npm i optimize-css-assets-webpack-plugin -D

     // 导入压缩CSS样式表的插件
      const  OptimizeCssAssetsWebpackPlugin=require('optimize-css-assets-webpack-plugin')
      new OptimizeCssAssetsWebpackPlugin()//配置自动压缩CSS

p138  HTML
    
      plugins: [
        new HtmlWebpackPlugin({
            template: './src/index.html',
            minify: { // 压缩html
                collapseWhitespace: true,  //移除页面中的注释
                removeComments: true    //合并空白字符
            }
        }),
       ]

  -------------------------------------------------
   注意，发布策略在开发阶段不用配置，只等项目完成，等待发布时配置！！！！！！！！！！！！！！！！！

  -------------------------------------------------

p139   在普通的网页中使用render函数渲染组件

p140  
     ----------这里和视频不同，是新版本配置-------------

   安装vue，因为vue是项目依赖，所以要
        1. npm i vue -S,  安装vue项目依赖，
         2. npm i vue-template-compiler -D                        
     Vue-loader在15.*之后的版本，vue-loader的使用都是需要VueLoaderPlugin的导入
     
     这里下载的是"vue-loader": "^15.9.8",

     //导入vue 的插件
   const VueLoaderPlugin = require('vue-loader/lib/plugin')
   new VueLoaderPlugin(),//配置vue 的插件

    {test:/\.vue$/,use:'vue-loader'}//解析vue组件的第三方loader

p141  在webpack中使用vue 组件
 p142  在webpack中使用vue-router
 p143   style 标签的scoped属性实现私有组件样式

 p144   将路由抽离为单独的模块

 p145 配置全局的Mint-UI

      npm i mint-ui -S

p146  使用mint-UI 中的button 按钮

